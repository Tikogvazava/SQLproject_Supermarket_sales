  /* 
The following Data is from Kaggle Database - Supermerket Sales. Split the Data into two tables in Excel and then import these two tables into BigQuery.
Skills used: Joins, CTE's, Temp Tables, Windows Functions, Aggregate Functions, Creating Views, Converting Data Types
*/
SELECT
  *
FROM
  sales.supermarket_sales_1
ORDER BY
  Quantity DESC
SELECT
  *
FROM
  sales.supermarket_sales_2
ORDER BY
  8 DESC
  
  -- Finding out the total quantity of items sold by each supermarket for each product line.
SELECT
  Product_line,
  Branch,
  SUM(Quantity) AS Total_quantity_sold
FROM
  sales.supermarket_sales_1
GROUP BY
  Branch,
  Product_line
ORDER BY
  Total_quantity_sold DESC
  
  -- Finding out what product line is the most popular by comparing total quantities sold across different product lines.
SELECT
  DISTINCT Product_line,
  SUM(Quantity) AS Total_quantity_sold
FROM
  sales.supermarket_sales_1
GROUP BY
  Product_line
ORDER BY
  Total_quantity_sold DESC
  
  -- Finding out the total quantity of invoices generated by each supermarket.
SELECT
  DISTINCT COUNT(Invoice_ID) AS Invoice_ID_count,
  Branch
FROM
  sales.supermarket_sales_2
GROUP BY
  Branch
ORDER BY
  Invoice_ID_count ASC
  
  -- Finding out which supermarket generated the highest revenue and rounding the generated values to the nearest tenth.
SELECT
  ROUND(SUM(Unit_price*Quantity), 1) AS Total_revenue,
  Branch
FROM
  sales.supermarket_sales_1
GROUP BY
  Branch
  
  -- Finding out how many invoices have been generated for female and male customers.
SELECT
  COUNT(Gender) AS Purchases_by_female
FROM
  sales.supermarket_sales_1
WHERE
  Gender='Female'
SELECT
  COUNT(Gender) AS Purchases_by_Male
FROM
  sales.supermarket_sales_1
WHERE
  Gender='Male'
  
  -- Finding out how many invoices have been generated by each supermarket for female and male customers who have memberships.
SELECT
  COUNT(Gender) AS female_Member_count,
  Branch
FROM
  sales.supermarket_sales_1
WHERE
  Gender='Female'
  AND Customer_type='Member'
GROUP BY
  Branch
SELECT
  COUNT(Gender) AS Male_Member_count,
  Branch
FROM
  sales.supermarket_sales_1
WHERE
  Gender='Male'
  AND Customer_type='Member'
GROUP BY
  Branch
  
  -- Finding out how many invoices have been generated for Male members who have paid by Credit Card at the Branch A.
SELECT
  sales_1.Invoice_ID,
  sales_1.Gender AS Male_Member,
  sales_1.Customer_type,
  sales_2.Payment
FROM
  sales.supermarket_sales_1 AS sales_1
INNER JOIN
  sales.supermarket_sales_2 AS sales_2
ON
  sales_1.Invoice_ID=sales_2.Invoice_ID
WHERE
  sales_1.Gender='Male'
  AND sales_1.Customer_type='Member'
  AND sales_2.Payment='Credit card'
  
  -- Finding out how many female non-member (Normal) customers who have paid with Ewallet in city Mandalay have given the supermarket Rating 7 and above.
SELECT
  sales_1.Invoice_ID,
  sales_1.Gender AS Female_Member,
  sales_1.Customer_type,
  sales_2.Payment,
  sales_1.City,
  sales_2.Rating
FROM
  sales.supermarket_sales_1 AS sales_1
INNER JOIN
  sales.supermarket_sales_2 AS sales_2
ON
  sales_1.Invoice_ID=sales_2.Invoice_ID
WHERE
  sales_1.Gender='Female'
  AND sales_1.Customer_type='Normal'
  AND sales_2.Payment='Ewallet'
  AND sales_1.City='Mandalay'
  AND sales_2.Rating>=7
ORDER BY
  sales_2.Rating DESC
  
  -- Using case statement to find out how many customers have bought 1-4, 4-7 and 7> items and group them into 'Low', 'Average', 'High' categories to see the trend - less customers purchasing more items.
SELECT
  COUNT(Invoice_ID) AS Customer_Count,
  CASE
    WHEN Quantity BETWEEN 1 AND 4 THEN 'Low 1-4'
    WHEN Quantity BETWEEN 4
  AND 7 THEN 'Average 4-7'
  ELSE
  'High >7'
END
  AS Quantity_of_items_purchased
FROM
  sales.supermarket_sales_1 AS sales_1
GROUP BY
  CASE
    WHEN Quantity BETWEEN 1 AND 4 THEN 'Low 1-4'
    WHEN Quantity BETWEEN 4
  AND 7 THEN 'Average 4-7'
  ELSE
  'High >7'
END

  -- What product line is the most popular in each supermarket by comparing number of items sold for each product line across theese three supermarkets.
SELECT
  Branch,
  MAX(Total_quantity_sold) AS Max_quantity_sold
FROM (
  SELECT
    Product_line,
    Branch,
    SUM(Quantity) AS Total_quantity_sold
  FROM
    sales.supermarket_sales_1
  GROUP BY
    Branch,
    Product_line
  ORDER BY
    3 DESC)
GROUP BY
  Branch
ORDER BY
  Max_quantity_sold DESC
  
  --What products make the greatest contribution to the revenue for all the supermarkets.
SELECT
  product_line,
  ROUND(SUM(Unit_price*Quantity),0) AS revenue_per_Product_line
FROM
  sales.supermarket_sales_1
GROUP BY
  1
ORDER BY
  2 DESC
  
  --What products make the greatest contribution to the revenue for each branch? Contribution of product categories to the overall revenue for each Supermarket
SELECT
  Branch,
  Product_line,
  ROUND(SUM(Unit_price*Quantity),0) AS Revenue_Per_Product_line
FROM
  sales.supermarket_sales_1
GROUP BY
  1,
  2
ORDER BY
  3 DESC
  
WITH -- For the Supermarket 'A'
  revenue_product AS (
  SELECT
    Product_line,
    ROUND(SUM(Unit_price*Quantity),0) AS Revenue_Per_Product_line
  FROM
    sales.supermarket_sales_1
  WHERE
    Branch='A'
  GROUP BY
    1)
  -- Main Query
SELECT
  *,
  SUM(Revenue_Per_Product_line) OVER() AS total_revenue,
  SAFE_DIVIDE(Revenue_Per_Product_line,SUM(Revenue_Per_Product_line) OVER()) AS share_revenue
FROM
  revenue_product
ORDER BY
  share_revenue DESC
  
WITH -- For the Supermarket 'B'
  revenue_product AS (
  SELECT
    Product_line,
    ROUND(SUM(Unit_price*Quantity),0) AS Revenue_Per_Product_line
  FROM
    sales.supermarket_sales_1
  WHERE
    Branch='B'
  GROUP BY
    1)
  -- Main Query
SELECT
  *,
  SUM(Revenue_Per_Product_line) OVER() AS total_revenue,
  SAFE_DIVIDE(Revenue_Per_Product_line,SUM(Revenue_Per_Product_line) OVER()) AS share_revenue
FROM
  revenue_product
ORDER BY
  share_revenue DESC
  
WITH -- For the Supermarket 'C'
  revenue_product AS (
  SELECT
    Product_line,
    ROUND(SUM(Unit_price*Quantity),0) AS Revenue_Per_Product_line
  FROM
    sales.supermarket_sales_1
  WHERE
    Branch='C'
  GROUP BY
    1)
  -- Main Query
SELECT
  *,
  SUM(Revenue_Per_Product_line) OVER() AS total_revenue,
  SAFE_DIVIDE(Revenue_Per_Product_line,SUM(Revenue_Per_Product_line) OVER()) AS share_revenue
FROM
  revenue_product
ORDER BY
  share_revenue DESC
  
  --Contribution of each product line to revenue over time for each supermarket for the following product line - 'Sports and travel','Food and beverages','Electronic accessories'.
WITH -- for the Supermarket 'A'
  revenue_product AS (
  SELECT
    Product_line,
    DATE(DATE_TRUNC(date,MONTH)) AS Purchase_month,
    ROUND(SUM(Unit_price*Quantity),0) AS revenue_per_Product_line
  FROM
    sales.supermarket_sales_1
  WHERE
    Branch='A'
  GROUP BY
    1,
    2)
  -- Main Query
SELECT
  *
FROM (
  SELECT
    *,
    SAFE_DIVIDE(revenue_per_Product_line, SUM(revenue_per_Product_line) OVER(PARTITION BY Purchase_month)) AS ratio
  FROM
    revenue_product) a
WHERE
  Product_line IN ('Sports and travel',
    'Food and beverages',
    'Electronic accessories')
ORDER BY
2

WITH -- for the Supermarket 'B'
  revenue_product AS (
  SELECT
    Product_line,
    DATE(DATE_TRUNC(date,MONTH)) AS Purchase_month,
    ROUND(SUM(Unit_price*Quantity),0) AS revenue_per_Product_line
  FROM
    sales.supermarket_sales_1
  WHERE
    Branch='B'
  GROUP BY
    1,
    2)
  -- Main Query
SELECT
  *
FROM (
  SELECT
    *,
    SAFE_DIVIDE(revenue_per_Product_line, SUM(revenue_per_Product_line) OVER(PARTITION BY Purchase_month)) AS ratio
  FROM
    revenue_product) a
WHERE
  Product_line IN ('Sports and travel',
    'Food and beverages',
    'Electronic accessories')
ORDER BY
  2
  
WITH -- for the Supermarket 'C'
  revenue_product AS (
  SELECT
    Product_line,
    DATE(DATE_TRUNC(date,MONTH)) AS Purchase_month,
    ROUND(SUM(Unit_price*Quantity),0) AS revenue_per_Product_line
  FROM
    sales.supermarket_sales_1
  WHERE
    Branch='C'
  GROUP BY
    1,
    2)
  -- Main Query
SELECT
  *
FROM (
  SELECT
    *,
    SAFE_DIVIDE(revenue_per_Product_line, SUM(revenue_per_Product_line) OVER(PARTITION BY Purchase_month)) AS ratio
  FROM
    revenue_product) a
WHERE
  Product_line IN ('Sports and travel',
    'Food and beverages',
    'Electronic accessories')
ORDER BY
  2
 
  -- Looking at customers vs purchased quantities over time
SELECT
  Invoice_ID,
  Branch,
  Date,
  Time,
  Quantity,
  SUM(Quantity) OVER (PARTITION BY Branch ORDER BY Branch, Date, Time) AS RollingQUantitySold
FROM
  sales.supermarket_sales_1
ORDER BY
  2,
  3,
  4
